// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	amqp091 "github.com/rabbitmq/amqp091-go"

	mock "github.com/stretchr/testify/mock"
)

// AMQPPublisher is an autogenerated mock type for the AMQPPublisher type
type AMQPPublisher struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *AMQPPublisher) Close() {
	_m.Called()
}

// GetChannel provides a mock function with given fields:
func (_m *AMQPPublisher) GetChannel() *amqp091.Channel {
	ret := _m.Called()

	var r0 *amqp091.Channel
	if rf, ok := ret.Get(0).(func() *amqp091.Channel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amqp091.Channel)
		}
	}

	return r0
}

// GetConnection provides a mock function with given fields:
func (_m *AMQPPublisher) GetConnection() *amqp091.Connection {
	ret := _m.Called()

	var r0 *amqp091.Connection
	if rf, ok := ret.Get(0).(func() *amqp091.Connection); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amqp091.Connection)
		}
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, exchange, key, msg
func (_m *AMQPPublisher) Publish(ctx context.Context, exchange string, key string, msg amqp091.Publishing) error {
	ret := _m.Called(ctx, exchange, key, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, amqp091.Publishing) error); ok {
		r0 = rf(ctx, exchange, key, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishWithContext provides a mock function with given fields: ctx, exchange, key, mandatory, immediate, msg
func (_m *AMQPPublisher) PublishWithContext(ctx context.Context, exchange string, key string, mandatory bool, immediate bool, msg amqp091.Publishing) error {
	ret := _m.Called(ctx, exchange, key, mandatory, immediate, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, bool, amqp091.Publishing) error); ok {
		r0 = rf(ctx, exchange, key, mandatory, immediate, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
